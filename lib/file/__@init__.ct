
final modes = ["a", "w", "w+", "r", "r+", "a+"]


def @handle_mode(mode)
    if not modes.includes(mode): 
        raise ValueError(f"Invalid mode: '%{mode}'")
    end
    return mode
end

def @get_modes()
    return f"Modes: %{modes.join(', ')}"
end

def @check_closed(self)
    if self.closed:
        raise ValueError(f"I/O operation on closed file")
    end
end

def @check_readable(self)
    @check_closed(self)
    if not self.readable:
        raise IOError(f"File not open for reading")
    end
end

def @check_seekable(self,offset, whence)
    @check_closed(self)
    if not isinstanceof(offset, int):
        raise TypeError(f"seek() arg 1 must be of type int, not %{typeof(offset)}")
    end
    if not isinstanceof(whence, int):
        raise TypeError(f"seek() arg 2 must be of type int, not %{typeof(whence)}")
    end
    if isinstanceof(offset, int) and offset < 0:
        raise IOError(f"cannot seek nonzero end-relative value:%{offset}")
    end
    if isinstanceof(whence, int) and whence < 0 or whence > 2:
        raise ValueError(f"Invalid argument: whence=%{whence}")
    end
    if not isinstanceof(offset, int):
        raise TypeError(f"expected int, got %{typeof(offset)}")
    end
    if not isinstanceof(whence, int):
        raise TypeError(f"expected int, got %{typeof(whence)}")
    end
end

def @open(file, mode)
    mode = @handle_mode(mode)
    attempt:
        return __@file__(file, mode=mode)
    catch FileNotFoundError as e:
        raise FileNotFoundError(f"No such file or directory: '%{file}'")
    catch PermissionError as e:
        raise PermissionError(f"Permission denied: '%{file}'")
    catch IOError as e:
        raise IOError(f"I/O error: '%{e.message}'")
    end
end

class File
    def __@init__(self, name, mode="r")
        self.name = name
        self.mode = mode
        self.closed = false
        self.readable = mode.includes("r") or mode.includes("r+") or mode.includes("w+") or mode.includes("a+")
        self.lineno = 0
        self.file = @open(self.name, self.mode)
    end
    def toString(self)
        return f"%{self.name} %{self.mode}"
    end
    def read(self)
        @check_readable(self)
        let val = self.file.read()
        self.close()
        return val
    end
    def write(self, data)
        @check_closed(self)
        if self.mode == "w" or self.mode == "w+" or self.mode == "a" or self.mode == "a+" or self.mode == "r+":
            self.file.write(data)
            self.close()
        else:
            raise IOError(f"%{self.name} is not writable")
        end
    end
    def seek(self, offset, whence=0)
        @check_seekable(self, offset, whence)
        attempt:
            self.file.seek(offset, whence)
        catch:
            raise IOError(f"%{self.name} is not seekable")
        end
        return none
    end
    def close(self)
        self.file.close()
        self.closed = true
    end
end


let open = File

def @check_arg_type(arg,expected_type)
    match expected_type:
        case "string":
            if not isinstanceof(arg, str):
                raise TypeError("Expected string, got " + typeof(arg))
            end
        end
        case "number":
            if not isinstanceof(arg, int) and not isinstanceof(arg, float):
                raise TypeError("Expected number, got " + typeof(arg))
            end
        end
    end
end
def @write(output)
    @check_arg_type(output, "string")
    __@std_out_write(output)
end








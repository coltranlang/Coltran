/**
    * Math module
    * @module Math
    * @function add - Add two numbers
    * @function sub - Subtract two numbers
    * @function mul - Multiply two numbers
    * @function min - Return the smaller of two numbers
    * @function max - Return the larger of two numbers
    * @function pow - Raise a number to a power
    * @function sqrt - Return the square root of a number
    * @function abs - Return the absolute value of a number
    * @function pi - Return the value of pi
    * @function deg - Convert an angle from degrees to radians
    * @function rad - Convert an angle from radians to degrees
    * @function gcd - Return the greatest common divisor of two numbers
    * @function lt - Reduce a given fraction to its lowest terms
*/

let add = def (a, b) -> a + b
let sub = def (a, b) -> a - b
let mul = def (a, b) -> a * b
let min = def (a, b) -> if a < b: a else: b
let max = def (a, b) -> if a > b: a else: b
let pow = def (a, b) -> a ^ b
let sqrt = def (a) -> int(a ^ 0.5)
let abs = def (a) -> if a < 0: -a else: a
let pi = 3.141592653589793
let deg = def (a) -> a * pi / 180
let rad = def (a) -> a * 180 / pi
def gcd(numerator: int, denominator: int): int
    /**
        * Return the greatest common divisor of two numbers
        * @param {number} numerator
        * @param {number} denominator
        * @returns {number}
    */
    let i, j = not isinstanceof(numerator, int), not isinstanceof(denominator, int)
    if i or j:
        raise TypeError("numerator and denominator must be integers")
    end
    if denominator == 0:
        raise ValueError("denominator cannot be zero")
    else:
        return calc_gcd(numerator, denominator)
    end
end
        
def calc_gcd(numerator: int, denominator: int): int
    /**
        * Calculate the greatest common divisor of two numbers
        * @param {number} numerator
        * @param {number} denominator
        * @returns {number}	
    */
    if numerator % denominator == 0:
        return denominator
    else:
        return calc_gcd(denominator, numerator % denominator)
    end
end

def lt(numerator: int, denominator: int): pair
    /**
        * Reduce a given fraction to its lowest terms
        * @param {number} numerator
        * @param {number} denominator
        * @returns {pair[number, number]}
    */
    let gcd_value = gcd(numerator, denominator)
    return numerator // gcd_value, denominator // gcd_value
end
/**
* Author: Kehinde A. Akinsanya
* Date: 01/31/2022
* Description: Vna algorithm can be used to collect items from a list and return a pair of lists containing a list of items collected and a list of items remaining.
* Vna takes two lists as arguments and returns a pair of lists.
* The first list should contain the names of the items to be collected and the second list should contain the items.
* The name of the remaining items to be collected uses a special syntax '*rest', which indicates that all remaining items should be collected.
* For example:
* let names = ['item1', 'item2', '*rest', 'item3']
* let items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
* @Vna(names, items) should return ([1,2,10], [3,4,5,6,7,8,9])
* @param {list} names - The names of the items to be collected.
* @param {list} items - The items to be collected.
* @return {list} - The items collected and the items remaining.
*/




# Check if we have a '*rest' name in the list of names
def @is_rest_name(string)
    if len(string) == 0:
        return false
    end
    return string[0] == '*'
end


def @check_rest_name(names)
    let is_rest_name = false
    in names as name:
        if @is_rest_name(name):
            is_rest_name = true
        end
    end
    if not is_rest_name:
        raise Exception('No *rest name found in the list of names to collect')
    end
end



class Vna
    rest_list = []
    collected_list = []
    @version = '1.0.0'
    def __@init__(self, names, items)
        self.names = names
        self.items = items
    end
    def create(self)
        @check_rest_name(self.names)
        let len_names = len(self.names)
        let len_items = len(self.items)
        in range(len_names) as i:
            let first_positional_arg = i
            let last_positional_arg  = len_names - 1
            if @is_rest_name(self.names[i]):
                if len_names == 1:
                    let start_index = self.names.indexOf(self.names[i])
                    self.rest_list = args[start_index:]
                else:
                    # if first_positional_arg is == to 0 then the rest_list is the first positional arg
                    # and we need to get the args starting from the rest_list index and ending at the index of the collected_list  e.g names = ["*args","a","b","c"] args = [1,2,3,4,5,6,7,8,9,10]
                    # rest_list = [1,2,3,4,5,6,7] collected_list  = [8,9,10]
                    if first_positional_arg == 0:
                        let start_index = self.names.indexOf(self.names[i])
                        self.rest_list = args[start_index:len_items - len_names + 1]
                        self.collected_list  = args[len_items - len_names + 1:]
                    # if last_positional_arg is == to i then the *args is at the last position of the pramater, then we get the args starting from the nonargs and ending at the startargs index e.g names = ["a","b","c","*args"] args = [1,2,3,4,5,6,7,8,9,10]
                    # rest_list = [4,5,6,7,8,9,10] collected_list  = [1,2,3]
                    elif last_positional_arg == i:
                        let start_index = self.names.indexOf(self.names[i])
                        self.rest_list = args[start_index:len_items]
                        self.collected_list  = args[0:start_index]
                    # if the *args is in the middle of the names then we get the args starting from the nonargs and ending at the startargs index e.g names = ["a","b","c","*args","d","e"] args = [1,2,3,4,5,6,7,8,9,10]
                    # rest_list = [4,5,6,7,8] collected_list  = [1,2,3,9,10]
                    else:
                        let start_index = self.names.indexOf(self.names[i])
                        let first_args = args[0:start_index]
                        let collected_names = self.names[start_index:len_names]
                        let collected_names = collected_names.filter(def (name) -> @is_rest_name(name) == false)
                        
                        # we reverse the args
                        let reversed_args = args[::-1][0:len(collected_names)]
                        let reversed_args_names = collected_names[::-1]
                        self.rest_list = args[start_index:len_items - len_names + start_index + 1]
                        let re_reversed_args = reversed_args[::-1]
                        let re_reversed_args_names = reversed_args_names[::-1]
                        self.collected_list  = first_args + re_reversed_args
                    end
                end
            end
        end        
        return self.rest_list, self.collected_list 
    end
    def __@str__(self)
        return f"Vna %{self.@version}"
    end
end


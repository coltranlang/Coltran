line(1)
# Fibonacci series
def @fibonacci(num)
    if num <= 1 :
        return num
    else:
        return @fibonacci(num - 1) + @fibonacci(num - 2)
    end
end

def @fibonacci(num)
    if num <= 1 :
        return num
    else:
        return @fibonacci(num - 1) + @fibonacci(num - 2)
    end
end

final num = @fibonacci(10)

println(num)


line(2)
# Bubble Sort
def @checkList(arr)
    if not arr and arr.is_empty():
        return false
    end
    return true
end

def @bubblesort(arr=[])
    # Check if the arr is empty
    if not @checkList(arr):
        raise Exception(f"Expected list or list is empty")
    else:
        if arr.is_number() or arr.is_string():
            for i = 0 to arr.length:
                for j = 0 to arr.length - 1:
                    if arr[j] > arr[j + 1]:
                        let temp = arr[j]
                        arr[j] = arr[j + 1]
                        arr[j + 1] = temp
                    end
                end
            end
        else:
            raise Exception(f"Expected List of numbers")
        end
    end
    return arr
end

let arr = ["Orange", "Apple", "Banana", "Mango"]
let arr2 = [5, 3, 8, 6, 2, 1, 4, 7]
println(arr)
println(@bubblesort(arr)) # ["Apple", "Banana", "Mango", "Orange"]
println(arr2)
println(@bubblesort(arr2)) # [1, 2, 3, 4, 5, 6, 7, 8]





line(3)
# Binary Tree
class TreeNode()
    def __@init__(self, x)
        self.val = x
        self.left = none
        self.right = none
    end
end


def @treeNodeToString(root)
    if not root:
        return "[]"
    end
    let output = ""
    let queue = [root]
    let current = 0
    while current != len(queue):
        let node = queue[current]
        current += 1

        if not node:
            output += "null, "
            current += 1
            continue
        end
        output += f"%{node.val}, "
        queue.append(node.left)
        queue.append(node.right)
    end
    return "[" + output[:-2] + "]"
end

def @stringToTreeNode(input)
    let input = input.strip()
    let input = input[1:-1]
    if not input:
        return none
    end
    let inputValues = in input.split(',') as s: s.strip()
    let root = TreeNode(int(inputValues[0]))
    let nodeQueue = [root]
    let front = 0
    let index = 1
    while index < len(inputValues):
        let node = nodeQueue[front]
        front = front + 1

        let item = inputValues[index]
        index = index + 1
        if item != "null":
            let leftNumber = int(item)
            node.left = TreeNode(leftNumber)
            nodeQueue.append(node.left)
        end
        if index >= len(inputValues):
            break
        end
        item = inputValues[index]
        index = index + 1
        if item != "null":
            let rightNumber = int(item)
            node.right = TreeNode(rightNumber)
            nodeQueue.append(node.right)
        end
    end
    return root
end


def @prettyPrintTree(node, prefix="", isLeft=true)
    if not node:
        print("Empty Tree")
        return
    end
    if node.right:
        if isLeft:
            @prettyPrintTree(node.right, prefix + "│   ", false)
        else:
            @prettyPrintTree(node.right, prefix + "    ", false)
        end
    end
    if isLeft:
        print(prefix + "└── " + f"%{node.val}")
    else:
        print(prefix + "┌── " + f"%{node.val}")
    end
    if node.left:
        if isLeft:
            @prettyPrintTree(node.left, prefix + "    ", true)
        else:
            @prettyPrintTree(node.left, prefix + "│   ", true)
        end
    end
end


def @main()
    let root = @stringToTreeNode("[1,2,3,4,5,6,7]")
    @prettyPrintTree(root)
end

@main()

# Permutations
class Permutaion
    def permute(self, nums_list)
        let result = []
        
        if len(nums_list) == 1:
            return [nums_list[:]]
        end
        in range(len(nums_list)) as i:
            let n = nums_list.pop(0)
            let perms = self.permute(nums_list)
            in perms as perm:
                perm.append(n)
            end
            result.extend(perms)
            nums_list.append(n)
        end
        return result
    end
end

let perm = Permutaion()
print(perm.permute([1, 2, 3])) # [[3, 2, 1], [2, 3, 1], [1, 3, 2], [3, 1, 2], [2, 1, 3], [1, 2, 3]]

let perm = Permutaion()
print(perm.permute([0,1])) # [[1, 0], [0, 1]]

let perm = Permutaion()
print(perm.permute([1])) # [[1]]


# Minimun Window Substring
class Solution
    def minWindow(self, s: str, t: str): str
        if s == "" or t == "":
            return ""
        end

        let countT, window = {}, {}

        in t as c:
            countT[c] = 1 + countT.get(c,0)
        end
        
        let have, need = 0, len(countT)
        let res, resLen = [-1, -1], float("infinity")
        let l = 0
        for r = 0 to len(s):
            let c = s[r]
            window[c] = 1+ window.get(c,0)
            if c in countT and window[c] == countT[c] :
                    have += 1
            end
            while have == need:
                if r - l + 1 < resLen:
                    res = [l, r]
                    resLen = r - l + 1
                end
                window[s[l]] -= 1
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                        have -= 1
                end
                l += 1
            end
        end

        let l, r = res
        return if resLen != float("infinity"): s[l:r+1] else: ""
    end
end


let s_string = "ADOBECODEBANC"
let t_string = "ABC" 

let solution = Solution()
let result = solution.minWindow(s_string, t_string)
print(result)


# Find Duplicates
class Solution  
    def findDuplicateNums(self, nums)
        let result = []
        in nums as n:
            if nums[abs(n) - 1] < 0:
                result.append(abs(n))
            else:
                nums[abs(n) - 1] = -nums[abs(n) - 1]
            end
        end
        return result
    end
    def findDuplicates(self, arr)
        let result = []
        let duplicates = []
        in range(len(arr)) as i:
            if arr[i] not in result:
                result.append(arr[i])
            else:
                duplicates.append(arr[i])
            end
        end
        return result, duplicates
    end
end

let solution = Solution()
let result = solution.findDuplicateNums([4,3,2,7,8,2,3,1])
print(result)

let solution = Solution()
let result, duplicates = solution.findDuplicates(["a","b","e","c","b","d","e"])
print(result, duplicates)

# Letter Combinations of a Phone Number
class Solution
    def letterCombinations(self, digits: str)
        let result = []
        let digitToChar = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz"
        }

        def backtrack(i, curStr)
            if len(curStr) == len(digits):
                result.append(curStr)
                return
            end
            in digitToChar[digits[i]] as c:
                backtrack(i + 1, curStr + c)
            end
        end

        if digits:
            backtrack(0, "")
        end

        return result
    end
end

let solution = Solution()
let result = solution.letterCombinations("23")
print(result) # ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
        
# Word Break
class Solution
    def wordBreak(self, s: str, wordDict: List[str]): bool
        let wordSet = set(wordDict)
        let dp = [false] * (len(s) + 1)
        dp[0] = true
        in range(1, len(s) + 1) as i:
            in range(i) as j:
                if dp[j] and s[j:i] in wordSet:
                    dp[i] = true
                    break
                end
            end
        end
        return dp[len(s)]
    end
end

let solution = Solution()
let result = solution.wordBreak("leetcode", ["leet", "code"])
print(result, "true") # true


# Coin Change
class Solution
    def coinChange(self, coins: List[int], amount: int): int
        let dp = [amount + 1] * (amount + 1)
        dp[0] = 0

        in range(1, amount + 1) as i:
            in coins as coin:
                if i - coin >= 0:
                    dp[i] = min(dp[i], dp[i - coin] + 1)
                end
            end
        end
        return if dp[amount] != amount + 1: dp[amount] else: -1
    end
end

let solution = Solution()
let result = solution.coinChange([1, 2, 5], 11)
print(result) # 3


let builtins = [
    'print',
    'println',
    'input',
    'inputInt',
    'inputFloat',
    'format',
    'str',
    'range',
    'int',
    'float',
    'bool',
    'list',
    'pair',
    'Object',
    'max',
    'min',
    'isFinite',
    'sorted',
    'substr',
    'reverse',
    'Binary',
    'line',
    'clear',
    'typeof',
    'isinstanceof',
    'hasProperty',
    'delay',
    'Exception',
    'exit'
]

let string_methods = {
    'upperCase': 'upperCase', # String.upperCase()
    'lowerCase': 'lowerCase', # String.lowerCase()
    'capitalize': 'capitalize', # String.capitalize()
    'split': 'split', # String.split(delimiter)
    'join': 'join', # String.join(delimiter)
    'substr': 'substr', # String.substr(start, end)
    'replace': 'replace', # String.replace(old, new, Optional: count)
    'slice': 'slice', # String.slice(start, end)
    'strip': 'strip', # String.strip()
    'length': 'length', # String.length
    'charAt': 'charAt', # String.charAt(index)
    'includes': 'includes', # String.includes(substring)
    'startsWith': 'startsWith', # String.startsWith(substring)
    'find': 'find', # String.find(value, Optional: start, Optional: end)
    'count': 'count', # String.count(value)
    'format': 'format', # String.format(value)
    'isDigit': 'isDigit', # String.isDigit()
    'isAlpha': 'isAlpha', # String.isAlpha()
    'isAscii': 'isAscii', # String.isAscii()
    'isLower': 'isLower', # String.isLower()
    'isUpper': 'isUpper', # String.isUpper()
    'title': 'title', # String.title()
    'translate': 'translate', # String.translate(table)
    'zfill': 'zfill', # String.zfill(width)
    'splitlines': 'splitlines', # String.splitlines()
    'isSpace': 'isSpace', # String.isSpace()
    'isTitle': 'isTitle', # String.isTitle()
    'isNumeric': 'isNumeric', # String.isNumeric()
    'lstrip': 'lstrip', # String.lstrip()
    'rstrip': 'rstrip', # String.rstrip()
    'partition': 'partition', # String.partition(sep)
    'rpartition': 'rpartition', # String.rpartition(sep)
    'startswith': 'startswith', # String.startswith(prefix, Optional: start, Optional: end)
    'endswith': 'endswith', # String.endswith(suffix, Optional: start, Optional: end)
    'encode': 'encode', # String.encode(encoding, Optional: errors)
    'findIndex': 'findIndex', # String.findIndex(value, Optional: start, Optional: end)
    '__getproperty': '__getproperty', # String.__getproperty__(property)
    '__methods__': '__methods__', # String.__methods__()
}

let number_methods = {
    'toInt': 'toInt', # Number.toInt()
    'toFloat': 'toFloat', # Number.toFloat()
    'toString': 'toString' # Number.toString()
}

let list_methods = {
    'length': 'length', # List.length
    'append': 'append', # List.append(value)
    'pop': 'pop', # List.pop(Optional: index)
    'remove': 'remove', # List.remove(value)
    'insert': 'insert', # List.insert(index, value)
    'empty': 'empty', # List.empty()
    'reverse': 'reverse',  # List.reverse()
    'getItem': 'getItem', # List.getItem(index)
    'setItem': 'setItem', # List.setItem(value, Optional: index)
    'slice': 'slice', # List.slice(start, end)
    'sort': 'sort', # List.sort(Optional: compare)
    'contains': 'contains', # List.contains(value)
    'includes': 'includes', # List.includes(value)
    'count': 'count', # List.count(value)
    'indexOf': 'indexOf' # List.indexOf(value)
}

let pair_methods = {
    'count': 'count',
    'indexOf': 'indexOf'
}

let dict_object_methods = {
    'length': 'length',
    'has_key': 'has_key',
    'keys': 'keys',
    'values': 'values',
    'items': 'items',
    'get': 'get',
    'set': 'set',
    'update': 'update',
    'remove': 'remove',
    'empty': 'empty'
}


line(1)
in string_methods as method_name, method_value:
end
# println(f'The index of "e" is %{pair.indexOf("e")}')
# println(f'Pair count: %{pair.count("e")}')
# println(f'List count: %{list.indexOf(5)}')
# println(f'List count: %{list.count(5)}')